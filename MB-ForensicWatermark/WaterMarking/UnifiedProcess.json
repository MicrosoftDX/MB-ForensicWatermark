{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "defaultValue": "UnifiedProcess",
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "[resourceGroup().location]"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "yourapp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure Function AppName for process Actions"
      }
    },
    "HostKeys": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure Function Host key for call Actions. Create one for this application"
      }
    }
  },
  "variables": {
    "StartNewJob": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','StartNewJob','?code=',parameters('HostKeys'))]",
    "UpdateMMRKStatus": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','UpdateMMRKStatus','?code=',parameters('HostKeys'))]",
    "GetPreprocessorJobData": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','GetPreprocessorJobData','?code=',parameters('HostKeys'))]",
    "EvalAssetStatusURL": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','EvalAssetStatus','?code=',parameters('HostKeys'))]",
    "UpdateWaterMarkCodeURL": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','UpdateWaterMarkCode','?code=',parameters('HostKeys'))]",
    "Eval_Renders_URL": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','EvalEnbebedCodes','?code=',parameters('HostKeys'))]",
    "Create_Asset_CopiesURL": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','CreateWaterMArkedAssets','?code=',parameters('HostKeys'))]",
    "Evaluate_Job_StausURL": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','EvalJobProgress','?code=',parameters('HostKeys'))]",
    "SubmitK8S_URL": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','SubmiteWaterMarkJob','?code=',parameters('HostKeys'))]",
    "Error_Asset_MMRK_URI": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','UpdateJob','?code=',parameters('HostKeys'))]",
    "Delete_Watermarked_Renders_URI": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','DeleteWatermarkedRenders','?code=',parameters('HostKeys'))]",
    "DeleteSucceededPods_URI": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','DeleteSucceededPods','?code=',parameters('HostKeys'))]",
    "CancelJobTimeOut_URI": "[concat('https://',parameters('yourapp'),'.azurewebsites.net/api/','CancelJobTimeOut','?code=',parameters('HostKeys'))]"
  },
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "SetJobID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "JobID",
                    "type": "String",
                    "value": "@{workflow()['run']['name']}"
                  }
                ]
              },
              "runAfter": {}
            },
            "SetSwitchChec": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "switchCheck",
                    "type": "Boolean",
                    "value": false
                  }
                ]
              },
              "runAfter": {
                "SetJobID": [
                  "Succeeded"
                ]
              }
            },
            "CheckJobStaus": {
              "type": "If",
              "expression": "@equals(body('ParseJobStaus')?['JobStatus']?['State'], 'Running')",
              "actions": {
                "Resonsw200": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ResponeCode",
                    "value": 200
                  },
                  "runAfter": {}
                }
              },
              "runAfter": {
                "Initialize_AssetStatusState": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Response409": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ResponeCode",
                      "value": 409
                    },
                    "runAfter": {}
                  }
                }
              }
            },
            "Response": {
              "type": "Response",
              "inputs": {
                "statusCode": "@variables('ResponeCode')",
                "body": "@body('StatProcessCAll')"
              },
              "runAfter": {
                "CheckJobStaus": [
                  "Succeeded"
                ]
              }
            },
            "SetResponseCode": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ResponeCode",
                    "type": "Integer",
                    "value": 200
                  }
                ]
              },
              "runAfter": {
                "SetSwitchChec": [
                  "Succeeded"
                ]
              }
            },
            "StatProcessCAll": {
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "[variables('StartNewJob')]",
                "headers": {
                  "Content-Type": "application/json"
                },
                "body": {
                  "AssetID": "@{triggerBody()?['AssetId']}",
                  "JobID": "@{variables('JobID')}",
                  "EmbebedCodes": "@triggerBody()?['EmbebedCodes']"
                },
                "retryPolicy": {
                  "type": "none"
                }
              },
              "runAfter": {
                "SetResponseCode": [
                  "Succeeded"
                ]
              }
            },
            "ParseJobStaus": {
              "type": "ParseJson",
              "inputs": {
                "content": "@body('StatProcessCAll')",
                "schema": {
                  "type": "object",
                  "properties": {
                    "AssetStatus": {
                      "type": "object",
                      "properties": {
                        "AssetId": {
                          "type": "string"
                        },
                        "State": {
                          "type": "string"
                        }
                      }
                    },
                    "JobStatus": {
                      "type": "object",
                      "properties": {
                        "JobID": {
                          "type": "string"
                        },
                        "State": {
                          "type": "string"
                        },
                        "Details": {
                          "type": "string"
                        },
                        "StartTime": {
                          "type": "string"
                        },
                        "FinishTime": {
                          "type": "any"
                        },
                        "Duration": {
                          "type": "any"
                        }
                      }
                    },
                    "EmbebedCodesList": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "EmbebedCodeValue": {
                            "type": "string"
                          },
                          "State": {
                            "type": "string"
                          },
                          "ParentAssetID": {
                            "type": "string"
                          },
                          "AssetID": {
                            "type": "any"
                          },
                          "Details": {
                            "type": "any"
                          }
                        },
                        "required": [
                          "EmbebedCodeValue",
                          "State",
                          "ParentAssetID",
                          "AssetID",
                          "Details"
                        ]
                      }
                    }
                  }
                }
              },
              "runAfter": {
                "Initialize_CurrentManifest": [
                  "Succeeded"
                ]
              }
            },
            "CheckProcessStart": {
              "type": "If",
              "expression": "@equals(variables('ResponeCode'), 200)",
              "actions": {
                "GetJobSubmitData": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "[variables('GetPreprocessorJobData')]",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "body": {
                      "AssetId": "@{triggerBody()?['AssetId']}",
                      "JobID": "@{variables('JobID')}",
                      "Codes": "@triggerBody()?['EmbebedCodes']"
                    },
                    "retryPolicy": {
                      "type": "none"
                    }
                  },
                  "runAfter": {}
                },
                "SubmitK8SJob": {
                  "type": "Scope",
                  "actions": {
                    "K8SJobData": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('GetJobSubmitData')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "JobID": {
                              "type": "string"
                            },
                            "AssetID": {
                              "type": "string"
                            },
                            "PreprocessorNotificationQueue": {
                              "type": "string"
                            },
                            "EmbedderNotificationQueue": {
                              "type": "string"
                            },
                            "VideoInformation": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "FileName": {
                                    "type": "string"
                                  },
                                  "MP4URL": {
                                    "type": "string"
                                  },
                                  "MMRKURL": {
                                    "type": "string"
                                  },
                                  "vbitrate": {
                                    "type": "string"
                                  },
                                  "gopsize": {
                                    "type": "string"
                                  },
                                  "videoFilter": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "FileName",
                                  "MP4URL",
                                  "MMRKURL",
                                  "vbitrate",
                                  "gopsize",
                                  "videoFilter"
                                ]
                              }
                            },
                            "EnbebedCodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "EmbebedCode": {
                                    "type": "string"
                                  },
                                  "MP4WatermarkedURL": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "FileName": {
                                          "type": "string"
                                        },
                                        "WaterMarkedMp4": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "FileName",
                                        "WaterMarkedMp4"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "EmbebedCode",
                                  "MP4WatermarkedURL"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {}
                    },
                    "SubmitK8S": {
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[variables('SubmitK8S_URL')]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": "@body('GetJobSubmitData')",
                        "retryPolicy": {
                          "type": "none"
                        }
                      },
                      "runAfter": {
                        "K8SJobData": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "runAfter": {
                    "GetJobSubmitData": [
                      "Succeeded"
                    ]
                  }
                },
                "K8SSubmitinOK": {
                  "type": "If",
                  "expression": "@equals(outputs('SubmitK8S')['statusCode'], 200)",
                  "actions": {
                    "PreprocessorCreateMMRK": {
                      "type": "If",
                      "expression": "@equals(body('ParseJobStaus')?['AssetStatus']?['State'], 'Running')",
                      "actions": {
                        "WaitMMRKReady": {
                          "type": "Until",
                          "expression": "@equals(variables('switchCheck'), false)",
                          "limit": {
                            "count": 5000,
                            "timeout": "PT10H"
                          },
                          "actions": {
                            "EvalAssetStatus": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[variables('EvalAssetStatusURL')]",
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "body": "@variables('CurrentManifes')"
                              },
                              "runAfter": {}
                            },
                            "setAssetStausResult": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "switchCheck",
                                "value": "@equals(body('EvalAssetStatus')?['AssetStatus']?['State'],'Running')"
                              },
                              "runAfter": {
                                "UpdateAssetMMRKStaus": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "UpdateAssetMMRKStaus": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "AssetStatusState",
                                "value": "@body('EvalAssetStatus')?['AssetStatus']?['State']"
                              },
                              "runAfter": {
                                "Update_Current_Manifest_Asset_Status": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "Update_Current_Manifest_Asset_Status": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CurrentManifes",
                                "value": "@{body('Update_JOB_Staus_bseon_Asset_Status')}"
                              },
                              "runAfter": {
                                "Update_JOB_Staus_bseon_Asset_Status": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "Update_JOB_Staus_bseon_Asset_Status": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[variables('Evaluate_Job_StausURL')]",
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "body": "@body('EvalAssetStatus')"
                              },
                              "runAfter": {
                                "EvalAssetStatus": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "WaitForMoreMMRKs": {
                              "type": "If",
                              "expression": "@equals(variables('switchCheck'), true)",
                              "actions": {
                                "DelayEvalAssetStatus": {
                                  "type": "Wait",
                                  "inputs": {
                                    "interval": {
                                      "count": 60,
                                      "unit": "Second"
                                    }
                                  },
                                  "runAfter": {}
                                }
                              },
                              "runAfter": {
                                "setAssetStausResult": [
                                  "Succeeded"
                                ]
                              }
                            }
                          },
                          "runAfter": {
                            "CreateAssetMMRKEntry": [
                              "Succeeded"
                            ]
                          }
                        },
                        "SetSwitchWaitAssetReady": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "switchCheck",
                            "value": true
                          },
                          "runAfter": {}
                        },
                        "CreateAssetMMRKEntry": {
                          "type": "Foreach",
                          "foreach": "@body('K8SJobData')?['VideoInformation']",
                          "actions": {
                            "CreateMMRKEntry": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[variables('UpdateMMRKStatus')]",
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "body": {
                                  "JobID": "@{variables('JobID')}",
                                  "AssetID": "@{body('K8SJobData')?['AssetID']}",
                                  "FileName": "@{items('CreateAssetMMRKEntry')?['FileName']}",
                                  "State": "Running",
                                  "Details": "Just sumbited",
                                  "FileURL": "@{items('CreateAssetMMRKEntry')?['MMRKURL']}"
                                }
                              },
                              "runAfter": {}
                            }
                          },
                          "runAfter": {
                            "SetSwitchWaitAssetReady": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Create_Embededd_Codes": {
                          "type": "Foreach",
                          "foreach": "@body('K8SJobData')?['EnbebedCodes']",
                          "actions": {
                            "Create_Watermark_Code": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[variables('UpdateWaterMarkCodeURL')]",
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "body": {
                                  "ParentAssetID": "@{triggerBody()?['AssetId']}",
                                  "EnbebedCode": "@items('Create_Embededd_Codes')"
                                },
                                "retryPolicy": {
                                  "type": "none"
                                }
                              },
                              "runAfter": {}
                            }
                          },
                          "runAfter": {
                            "SetSwitchWaitAssetReady": [
                              "Succeeded"
                            ]
                          }
                        }
                      },
                      "runAfter": {},
                      "else": {
                        "actions": {
                          "Create_Embedded_Code_on_MMRK_finished": {
                            "type": "Foreach",
                            "foreach": "@body('K8SJobData')?['EnbebedCodes']",
                            "actions": {
                              "Create_Embedded_Registers": {
                                "type": "Http",
                                "inputs": {
                                  "method": "POST",
                                  "uri": "[variables('UpdateWaterMarkCodeURL')]",
                                  "headers": {
                                    "Content-Type": "application/json"
                                  },
                                  "body": {
                                    "ParentAssetID": "@{triggerBody()?['AssetId']}",
                                    "EnbebedCode": "@items('Create_Embedded_Code_on_MMRK_finished')"
                                  }
                                },
                                "runAfter": {}
                              }
                            },
                            "runAfter": {}
                          }
                        }
                      }
                    },
                    "EmbedderCopies": {
                      "type": "Switch",
                      "expression": "@variables('AssetStatusState')",
                      "cases": {
                        "Error_Asset_MMRK": {
                          "case": "Error",
                          "actions": {
                            "Update_Job_Status_Asset_error": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[variables('Error_Asset_MMRK_URI')]",
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "body": {
                                  "Manifest": "@body('EvalAssetStatus')",
                                  "AssetStatus": "Error",
                                  "JobState": "Error",
                                  "JobStateDetails": "Fail creating MMKR files",
                                  "WaterMarkCopiesStatus": "Aborted",
                                  "WaterMarkCopiesStatusDetails": "Watermark copies aborted becouse MMRK fialed"
                                },
                                "retryPolicy": {
                                  "type": "none"
                                }
                              },
                              "runAfter": {}
                            }
                          }
                        },
                        "TimeOut_error": {
                          "case": "Running",
                          "actions": {
                            "Update_Job_Status_Asset_error_Timeout": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[variables('Error_Asset_MMRK_URI')]",
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "body": {
                                  "Manifest": "@body('EvalAssetStatus')",
                                  "AssetStatus": "Error",
                                  "JobState": "Error",
                                  "JobStateDetails": "Fail creating MMKR files, Timeout",
                                  "WaterMarkCopiesStatus": "Aborted",
                                  "WaterMarkCopiesStatusDetails": "Watermark copies aborted becouse MMRK fialed"
                                },
                                "retryPolicy": {
                                  "type": "none"
                                }
                              },
                              "runAfter": {}
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {
                          "WaitWatermarkCopiesRenders": {
                            "type": "Until",
                            "expression": "@equals(variables('switchCheck'), false)",
                            "limit": {
                              "count": 5000,
                              "timeout": "PT10H"
                            },
                            "actions": {
                              "Eval_Renders_": {
                                "type": "Http",
                                "inputs": {
                                  "method": "POST",
                                  "uri": "[variables('Eval_Renders_URL')]",
                                  "headers": {
                                    "Content-Type": "application/json"
                                  },
                                  "body": "@variables('CurrentManifes')",
                                  "retryPolicy": {
                                    "type": "none"
                                  }
                                },
                                "runAfter": {}
                              },
                              "Create_Asset_Copies": {
                                "type": "Http",
                                "inputs": {
                                  "method": "POST",
                                  "uri": "[variables('Create_Asset_CopiesURL')]",
                                  "headers": {
                                    "Content-Type": "application/json"
                                  },
                                  "body": "@body('Eval_Renders_')",
                                  "retryPolicy": {
                                    "type": "none"
                                  }
                                },
                                "runAfter": {
                                  "Eval_Renders_": [
                                    "Succeeded"
                                  ]
                                }
                              },
                              "Evaluate_Job_Staus": {
                                "type": "Http",
                                "inputs": {
                                  "method": "POST",
                                  "uri": "[variables('Evaluate_Job_StausURL')]",
                                  "headers": {
                                    "Content-Type": "application/json"
                                  },
                                  "body": "@body('Create_Asset_Copies')",
                                  "retryPolicy": {
                                    "type": "none"
                                  }
                                },
                                "runAfter": {
                                  "Create_Asset_Copies": [
                                    "Succeeded"
                                  ]
                                }
                              },
                              "Update_Manifest": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "CurrentManifes",
                                  "value": "@{body('Evaluate_Job_Staus')}"
                                },
                                "runAfter": {
                                  "Evaluate_Job_Staus": [
                                    "Succeeded"
                                  ]
                                }
                              },
                              "Is_Job_Finished": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "switchCheck",
                                  "value": "@equals(body('Evaluate_Job_Staus')?['JobStatus']?['State'], 'Running')"
                                },
                                "runAfter": {
                                  "Update_Manifest": [
                                    "Succeeded"
                                  ]
                                }
                              },
                              "WaitForWatermarkedCopies": {
                                "type": "If",
                                "expression": "@equals(variables('switchCheck'), true)",
                                "actions": {
                                  "AcelerateProcessOtherCopies": {
                                    "type": "If",
                                    "expression": "@equals(int(outputs('Evaluate_Job_Staus')['headers']?['watingCopies']), 0)",
                                    "actions": {
                                      "Delay_for_Check_Job_Staus": {
                                        "type": "Wait",
                                        "inputs": {
                                          "interval": {
                                            "count": 60,
                                            "unit": "Second"
                                          }
                                        },
                                        "runAfter": {}
                                      }
                                    },
                                    "runAfter": {}
                                  }
                                },
                                "runAfter": {
                                  "Is_Job_Finished": [
                                    "Succeeded"
                                  ]
                                }
                              }
                            },
                            "runAfter": {
                              "Set_Switch_Waait_For_Renders": [
                                "Succeeded"
                              ]
                            }
                          },
                          "Set_Switch_Waait_For_Renders": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "switchCheck",
                              "value": true
                            },
                            "runAfter": {}
                          },
                          "CheckTimeOutCopies": {
                            "type": "If",
                            "expression": "@equals(variables('switchCheck'), true)",
                            "actions": {
                              "CancelJobTimeOut": {
                                "type": "Http",
                                "inputs": {
                                  "method": "POST",
                                  "uri": "[variables('CancelJobTimeOut_URI')]",
                                  "headers": {
                                    "Content-Type": "application/json"
                                  },
                                  "body": "@variables('CurrentManifes')",
                                  "retryPolicy": {
                                    "type": "none"
                                  }
                                },
                                "runAfter": {}
                              }
                            },
                            "runAfter": {
                              "WaitWatermarkCopiesRenders": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "PreprocessorCreateMMRK": [
                          "Succeeded"
                        ]
                      }
                    },
                    "CleanAll": {
                      "type": "Scope",
                      "actions": {
                        "Delete_Watermarked_Renders": {
                          "type": "Http",
                          "inputs": {
                            "method": "POST",
                            "uri": "[variables('Delete_Watermarked_Renders_URI')]",
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "body": {
                              "AssetId": "@{body('ParseJobStaus')?['AssetStatus']?['AssetId']}",
                              "JobId": "@{variables('JobID')}"
                            },
                            "retryPolicy": {
                              "type": "none"
                            }
                          },
                          "runAfter": {
                            "DeleteK8SJobsAndPods": [
                              "Succeeded"
                            ]
                          }
                        },
                        "DeleteK8SJobsAndPods": {
                          "type": "Http",
                          "inputs": {
                            "method": "POST",
                            "uri": "[variables('DeleteSucceededPods_URI')]",
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "body": {
                              "JobId": "@{variables('JobID')}"
                            },
                            "retryPolicy": {
                              "type": "none"
                            }
                          },
                          "runAfter": {}
                        }
                      },
                      "runAfter": {
                        "EmbedderCopies": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "runAfter": {
                    "SubmitK8SJob": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Cancel_Job_Error_": {
                        "type": "Http",
                        "inputs": {
                          "method": "POST",
                          "uri": "[variables('Error_Asset_MMRK_URI')]",
                          "headers": {
                            "Content-Type": "application/json"
                          },
                          "body": {
                            "Manifest": "@body('StatProcessCAll')",
                            "AssetStatus": "Error",
                            "JobState": "Error",
                            "JobStateDetails": "Error Submite K8S JOB",
                            "WaterMarkCopiesStatus": "Aborted",
                            "WaterMarkCopiesStatusDetails": "Error submite JOB K8S"
                          },
                          "retryPolicy": {
                            "type": "none"
                          }
                        },
                        "runAfter": {}
                      }
                    }
                  }
                },
                "GetJobSubmitDatError": {
                  "type": "Scope",
                  "actions": {
                    "Cancel_Job_Error_JobSumitData": {
                      "type": "Http",
                      "inputs": {
                        "method": "POST",
                        "uri": "[variables('Error_Asset_MMRK_URI')]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "Manifest": "@body('StatProcessCAll')",
                          "AssetStatus": "Error",
                          "JobState": "Error",
                          "JobStateDetails": "Error on Get Sumit Job Data",
                          "WaterMarkCopiesStatus": "Aborted",
                          "WaterMarkCopiesStatusDetails": "Error on Get Sumit Job Data"
                        },
                        "retryPolicy": {
                          "type": "none"
                        }
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "GetJobSubmitData": [
                      "Failed"
                    ]
                  }
                },
                "Cancel_Job_Error_K8S_submit": {
                  "type": "Http",
                  "inputs": {
                    "method": "POST",
                    "uri": "[variables('Error_Asset_MMRK_URI')]",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "body": {
                      "Manifest": "@body('StatProcessCAll')",
                      "AssetStatus": "Error",
                      "JobState": "Error",
                      "JobStateDetails": "K8S submit error :@{body('SubmitK8S')}",
                      "WaterMarkCopiesStatus": "Error",
                      "WaterMarkCopiesStatusDetails": "K8S submit error"
                    },
                    "retryPolicy": {
                      "type": "none"
                    }
                  },
                  "runAfter": {
                    "SubmitK8SJob": [
                      "Failed"
                    ]
                  }
                }
              },
              "runAfter": {
                "Response": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_AssetStatusState": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AssetStatusState",
                    "type": "String",
                    "value": "@body('ParseJobStaus')?['AssetStatus']?['State']"
                  }
                ]
              },
              "runAfter": {
                "ParseJobStaus": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_CurrentManifest": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CurrentManifes",
                    "type": "String",
                    "value": "@{body('StatProcessCAll')}"
                  }
                ]
              },
              "runAfter": {
                "StatProcessCAll": [
                  "Succeeded"
                ]
              }
            },
            "ErrorStartProcess": {
              "type": "Response",
              "inputs": {
                "statusCode": "@outputs('StatProcessCAll')['statusCode']",
                "body": "@body('StatProcessCAll')"
              },
              "runAfter": {
                "StatProcessCAll": [
                  "Failed"
                ]
              }
            }
          },
          "parameters": {},
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "AssetId": {
                      "type": "string"
                    },
                    "EmbebedCodes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {}
}